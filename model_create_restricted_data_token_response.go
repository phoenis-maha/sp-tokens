/*
Selling Partner API for Tokens

The Selling Partner API for Tokens provides a secure way to access a customer's PII (Personally Identifiable Information). You can call the Tokens API to get a Restricted Data Token (RDT) for one or more restricted resources that you specify. The RDT authorizes subsequent calls to restricted operations that correspond to the restricted resources that you specified.  For more information, see the [Tokens API Use Case Guide](doc:tokens-api-use-case-guide).

API version: 2021-03-01
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateRestrictedDataTokenResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRestrictedDataTokenResponse{}

// CreateRestrictedDataTokenResponse The response schema for the createRestrictedDataToken operation.
type CreateRestrictedDataTokenResponse struct {
	// A Restricted Data Token (RDT). This is a short-lived access token that authorizes calls to restricted operations. Pass this value with the x-amz-access-token header when making subsequent calls to these restricted resources.
	RestrictedDataToken *string `json:"restrictedDataToken,omitempty"`
	// The lifetime of the Restricted Data Token, in seconds.
	ExpiresIn *int32 `json:"expiresIn,omitempty"`
}

// NewCreateRestrictedDataTokenResponse instantiates a new CreateRestrictedDataTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRestrictedDataTokenResponse() *CreateRestrictedDataTokenResponse {
	this := CreateRestrictedDataTokenResponse{}
	return &this
}

// NewCreateRestrictedDataTokenResponseWithDefaults instantiates a new CreateRestrictedDataTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRestrictedDataTokenResponseWithDefaults() *CreateRestrictedDataTokenResponse {
	this := CreateRestrictedDataTokenResponse{}
	return &this
}

// GetRestrictedDataToken returns the RestrictedDataToken field value if set, zero value otherwise.
func (o *CreateRestrictedDataTokenResponse) GetRestrictedDataToken() string {
	if o == nil || IsNil(o.RestrictedDataToken) {
		var ret string
		return ret
	}
	return *o.RestrictedDataToken
}

// GetRestrictedDataTokenOk returns a tuple with the RestrictedDataToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictedDataTokenResponse) GetRestrictedDataTokenOk() (*string, bool) {
	if o == nil || IsNil(o.RestrictedDataToken) {
		return nil, false
	}
	return o.RestrictedDataToken, true
}

// HasRestrictedDataToken returns a boolean if a field has been set.
func (o *CreateRestrictedDataTokenResponse) HasRestrictedDataToken() bool {
	if o != nil && !IsNil(o.RestrictedDataToken) {
		return true
	}

	return false
}

// SetRestrictedDataToken gets a reference to the given string and assigns it to the RestrictedDataToken field.
func (o *CreateRestrictedDataTokenResponse) SetRestrictedDataToken(v string) {
	o.RestrictedDataToken = &v
}

// GetExpiresIn returns the ExpiresIn field value if set, zero value otherwise.
func (o *CreateRestrictedDataTokenResponse) GetExpiresIn() int32 {
	if o == nil || IsNil(o.ExpiresIn) {
		var ret int32
		return ret
	}
	return *o.ExpiresIn
}

// GetExpiresInOk returns a tuple with the ExpiresIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateRestrictedDataTokenResponse) GetExpiresInOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresIn) {
		return nil, false
	}
	return o.ExpiresIn, true
}

// HasExpiresIn returns a boolean if a field has been set.
func (o *CreateRestrictedDataTokenResponse) HasExpiresIn() bool {
	if o != nil && !IsNil(o.ExpiresIn) {
		return true
	}

	return false
}

// SetExpiresIn gets a reference to the given int32 and assigns it to the ExpiresIn field.
func (o *CreateRestrictedDataTokenResponse) SetExpiresIn(v int32) {
	o.ExpiresIn = &v
}

func (o CreateRestrictedDataTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRestrictedDataTokenResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RestrictedDataToken) {
		toSerialize["restrictedDataToken"] = o.RestrictedDataToken
	}
	if !IsNil(o.ExpiresIn) {
		toSerialize["expiresIn"] = o.ExpiresIn
	}
	return toSerialize, nil
}

type NullableCreateRestrictedDataTokenResponse struct {
	value *CreateRestrictedDataTokenResponse
	isSet bool
}

func (v NullableCreateRestrictedDataTokenResponse) Get() *CreateRestrictedDataTokenResponse {
	return v.value
}

func (v *NullableCreateRestrictedDataTokenResponse) Set(val *CreateRestrictedDataTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRestrictedDataTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRestrictedDataTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRestrictedDataTokenResponse(val *CreateRestrictedDataTokenResponse) *NullableCreateRestrictedDataTokenResponse {
	return &NullableCreateRestrictedDataTokenResponse{value: val, isSet: true}
}

func (v NullableCreateRestrictedDataTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRestrictedDataTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
